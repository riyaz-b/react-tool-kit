// Importing the `createSlice` function from Redux Toolkit
// `createSlice` simplifies the process of creating Redux slices with actions and reducers
import { createSlice } from '@reduxjs/toolkit';

// Initial state for the employee slice
// Contains a list of employees and a `selectedEmployee` for editing purposes
const initialState = {
  employees: [
    { id: 1, name: 'John Doe', role: 'Developer' },
    { id: 2, name: 'Jane Smith', role: 'Designer' },
    { id: 3, name: 'Alice Johnson', role: 'Manager' },
    { id: 4, name: 'John Doe', role: 'Developer' },
    { id: 5, name: 'Jane Smith', role: 'Designer' },
    { id: 6, name: 'Alice Johnson', role: 'Manager' },
  ],
  selectedEmployee: null, // Holds the currently selected employee for editing
};

// Creating a Redux slice for managing employee data
const employeeSlice = createSlice({
  name: 'employee', // Name of the slice
  initialState, // Initial state for the slice
  reducers: {
    /**
     * Action to select an employee for editing
     * @param {Object} state - The current state of the slice
     * @param {Object} action - The action object containing the employee ID
     */
    selectEmployee: (state, action) => {
      // Find the employee by ID and set it as the selected employee
      state.selectedEmployee = state.employees.find(
        (employee) => employee.id === action.payload
      );
    },

    /**
     * Action to update an employee's details
     * @param {Object} state - The current state of the slice
     * @param {Object} action - The action object containing updated employee data
     */
    updateEmployee: (state, action) => {
      const { id, name, role } = action.payload; // Destructure the updated data
      // Find the employee by ID and update their details
      const employee = state.employees.find((emp) => emp.id === id);
      if (employee) {
        employee.name = name;
        employee.role = role;
      }
    },

    /**
     * Action to clear the selected employee
     * @param {Object} state - The current state of the slice
     */
    clearSelectedEmployee: (state) => {
      // Reset the selected employee to null
      state.selectedEmployee = null;
    },

    /**
     * Action to remove an employee by ID
     * @param {Object} state - The current state of the slice
     * @param {Object} action - The action object containing the employee ID
     */
    removeEmployee: (state, action) => {
      // Filter out the employee with the given ID
      state.employees = state.employees.filter(
        (employee) => employee.id !== action.payload
      );
    },
  },
});

// Exporting the actions generated by `createSlice`
// These actions will be used in components to dispatch changes to the Redux store
export const { selectEmployee, updateEmployee, clearSelectedEmployee, removeEmployee } =
  employeeSlice.actions;

// Exporting the reducer to be used in the Redux store configuration
export default employeeSlice.reducer;